pipeline {
    agent { label 'jdk11-mvn3.8.4' }
    triggers {
        upstream(upstreamProjects: 'testfile', threshold: hudson.model.Result.SUCCESS)
        cron('30 */2 * * 0,6')
        pollSCM('30 23 * * 0,6')
    }
    parameters {
        choice(name: 'BRANCH_TO_BUILD', choices: ['main', 'petdeclarative', 'petscripted'], description: 'To Build')
        string(name: 'MAVEN_GOAL', defaultValue: 'package', description: 'For Run')
    }
    tools {
        maven 'MVN_3.8.4'
    }
    stages {
        stage('Get Code') {
            steps {
                git branch: 'main', url: 'https://github.com/nagaraju0/spring-petclinic.git'
            }
        }
        stage('Build') {
            steps {
                sh 'mvn clean package'
            }
        }
        stage('Archive') {
            steps {
                // archive artifacts
                archive 'target/*.xml'
            }
        }
        stage('Publish Build Result') {
            steps {
                junit '**/TEST-*.xml'
            }
        }
        stage("build & SonarQube analysis") {
            steps {
                withSonarQubeEnv(installationName:'SONAR_9.2.1') {
                    sh 'mvn clean package sonar:sonar'
                }
            }
        }
        stage('Quality Gate') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        stage ('Artifactory configuration') {
            steps {
                rtMavenDeployer (
                    id: 'MAVEN_DEPLOYER',
                    serverId: 'JFROG-OSS',
                    releaseRepo: 'qt-maven-releases',
                    snapshotRepo: 'qt-maven-snapshots'

                )
            }
        }
        stage ('Exec Maven') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'JFROG_ARTIFACTORY', usernameVariable: 'ARTIFACTORY_USERNAME', passwordVariable: 'ARTIFACTORY_PASSWORD')]) {
                    rtMavenRun (
                        tool: 'MNV_3.8.4',
                        pom: 'pom.xml',
                        goals: 'clean install',
                        deployerId: 'MAVEN_DEPLOYER'
                    )
                }
            }
        }
        stage ('Publish build info') {
            steps {
                rtPublishBuildInfo (
                    serverId: 'JFROG-OSS'
                )
            }
        }
    }
    post {
        always {
            mail from: "abbaigarimanavadu77@gmail.com",
                to: "nagarajucivil011@gmail.com",
                subject: "Status of the pipeline : ${currentBuild.fullDisplayName}",
                body: "${env.BUILD_URL} has the result ${currentBuild.result}"
        }
    }
}