pipeline {
    agent { label 'jdk11-mvn3.8.4' }
    triggers {
        upstream(upstreamProjects: 'normal', threshold: hudson.model.Result.SUCCESS)
        cron('30 */2 * * 1-5')
        pollSCM('30 23 * * 0,6')
    }
    parameters {
        choice(name: 'BRANCH_TO_BUILD', choices: ['frog', 'petdeclarated', 'petdeclarative'], description: 'to build')
        string(name: 'MAVEN_GOAL', defaultValue: 'clean package', description: 'for build')
    }
    tools {
        maven 'MVN_3.8.4'
    }
    stages {
        stage('get clone code') {
            steps {
                git branch: 'main', url: 'https://github.com/nagaraju0/spring-petclinic.git'
            }
        }
        stage('build') {
            steps {
                sh 'mvn clean package'
            }
        }
        stage('archive') {
            steps {
                // archiving artifacts
                archive 'target/*.jar'
            }
        }
        stage('publlish build result') {
            steps {
                junit 'target/surefire-reports/*.xml'
            }
        }
        stage('build & SonarQube analysis') {
            steps {
                withSonarQubeEnv(installationName:'SONAR_9.2.1') {
                    sh 'mvn clean package sonar:sonar'
                }
            }
        }
        stage('Quality Gate') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    //parameter indicates to whether to set pipeline to UNSTABLE if Quality Gate fails
                    //true=setpipeline to UNSTABLE, false=don,t
                    waitforQualityGate abortpipeline: true 
                }
            }
        }
        stage('artifacory configuration') {
            steps {
                rtmavendepolyer (
                    id: "MAVEN_DEPOLYER",
                    serverId: 'JFROG-OSS',
                    releaseRepo: 'qt-maven-releases',
                    snapshotRepo: 'qt-maven-snapshots'
                )
            }
        }
        stage('Exec maven') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'JFROG_USER', usernameVariable: 'ARTIFACTORY_USERNAME', passwordVariable: 'ARTIFACTORY_PASSWORD')])
                rtMavenRun (
                    tool: 'MVN_3.8.4',
                    pom: 'pom.xml',
                    goals: 'clean install',
                    deployerId: "MAVEN_DEPOLYER"
                )
            }
        }
        stage('publish Build Info') {
            steps {
                rtPublishBuildInfo (
                    serverId: 'JFROG-OSS'
                )
            }
        }
    }
}