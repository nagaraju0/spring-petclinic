pipeline{
    agent { label 'jdk11-mvn3.8.4' }
    triggers {
        upstream(upstreamProjects: 'spc', threshold: hudson.model.Result.SUCCESS)
        cron('30 */2 * * 0,6')
        pollSCM('30 23 * * 0,6')  
    }
    parameters {
        choice(name: 'BRANCH_BUILD', choices: ['dec@25', 'kesava', 'main'], description: 'Tobuild')
        string(name: 'MAVEN_GOAL', defaultValue: 'clean package', description: 'forrun')
    }
    tools {
        maven 'MVN_3.8.4'
    }
    stages {
        stage('Get Clone Code') {
            steps {
                git branch: 'main', url: 'https://github.com/spring-projects/spring-petclinic.git'
            }
        }
        stage('To Build') {
            steps {
                sh 'mvn clean package'
            }
        }
        stage('Archive') {
            steps {
                //Archive Artifactory
                archive 'target/*.jar'
            }
        }
        stage('Publish Test Rsults') {
            steps {
                junit 'target/surefire-reports/*.xml'
            }
        }
        stage('build & SonarQube analysis') {
            steps {
                withSonarQubeEnv('My SonarQube Server') {
                    sh 'maven clean package sonar:sonar'
                }
            }
        }
        stage("Quality Gate") {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        stage ('Artifactory configuration') {
            steps {
                rtMavenDeployer (
                    id: "MAVEN_DEPLOYER",
                    serverId: "JFROG-OSS",
                    releaserepo: "qt-maven-releases",
                    snapshotrepo: "qt-maven-snapshots"
                )
            }
        }
        stage ('Exec Maven') {
            steps {
                 withCredentials([usernamePassword(credentialsId: 'JFROG_ARTIFACTROY', usernameVariable: 'ARTIFACTORY_USERNAME', passwordVariable: 'ARTIFACTORY_PASSWORD')]) {
                     rtMavenRun (
                         tool: 'MVN_3.8.4',
                         pom: 'pom.xml',
                         goals: 'clean install',
                         deployerId: 'MAVEN_DEPLOYER'
                     )
                 }
            }
        }
        stage ('Publish build info') {
            steps {
                rtPublishBuildInfo (
                    serverId: 'JFROG-OSS'
                )
            }
        }
    }
    post {
        always {
            mailfrom: "abbaigarimanavadu77@gmail.com",
                to: "nagarajucivil011@gmail.com",
                subject: "status of the pipeline : ${currentBuild.fullDisplayName}",
                body: "${env.BUILD_URL} has the result ${currentBuild.result}"
        }
    }
}